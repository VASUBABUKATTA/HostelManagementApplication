package com.hostelManagementApplication.hostel.srrviceimplementation;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.hostelManagementApplication.hostel.dto.HostlerFeeDto;
import com.hostelManagementApplication.hostel.exception.DuplicateEntryException;
import com.hostelManagementApplication.hostel.exception.ResourceNotFoundException;
import com.hostelManagementApplication.hostel.model.Hostler;
import com.hostelManagementApplication.hostel.model.HostlerFee;
import com.hostelManagementApplication.hostel.repository.HostlerFeeRepository;
import com.hostelManagementApplication.hostel.repository.HostlerRepository;
import com.hostelManagementApplication.hostel.serviceInterface.HostlerFeeServiceInterFace;

@Service
public class HostlerFeeServiceImplementation implements HostlerFeeServiceInterFace{
	
	@Autowired
	private HostlerFeeRepository hostlerFeerepository;
	
	@Autowired
	private HostlerRepository hostlerRepository;
	
	 @Autowired
	 private ModelMapper modelMapper;
	 
	@Override
	public ResponseEntity<List<HostlerFeeDto>> getAll() {
		List<HostlerFee> hostlerFeeData = hostlerFeerepository.findAll();
		if(hostlerFeeData.isEmpty())
        {
        	throw new ResourceNotFoundException("Hostlers Fee Details are Not Existed");
        }
        List<HostlerFeeDto> hostlerFeeDtos = hostlerFeeData.stream()
                .map(hostlerFee -> modelMapper.map(hostlerFee, HostlerFeeDto.class))
                .collect(Collectors.toList());
        return ResponseEntity.status(HttpStatus.OK).body(hostlerFeeDtos);
	}

	@Override
	public ResponseEntity<HostlerFeeDto> getById(long id) {
		 Optional<HostlerFee> hostlerFee = hostlerFeerepository.findById(id);
	        if (hostlerFee.isEmpty()) {
	            throw new ResourceNotFoundException("Provided Id Was Not Found");
	        }
	        HostlerFeeDto hostlerFeeDto = modelMapper.map(hostlerFee.get(), HostlerFeeDto.class);
	        return ResponseEntity.status(HttpStatus.OK).body(hostlerFeeDto);
	}

//	@Override
//	public ResponseEntity<String> createHostlerFee(HostlerFeeDto hostlerFeeDto) {
//		HostlerFee hostlerFee = modelMapper.map(hostlerFeeDto, HostlerFee.class);
//		hostlerFeerepository.save(hostlerFee);
//
//        return ResponseEntity.status(HttpStatus.CREATED).body("HostlerFee created successfully");
//		
//	}

	
	@Override
	public ResponseEntity<String> createHostlerFee(HostlerFeeDto hostlerFeeDto) {

	    // Validate mobile number in the DTO
	    String mobileNo = hostlerFeeDto.getHostlerMobile();

	    // Check if the mobile number exists in the Hostler repository
	    Optional<Hostler> hostlerOptional = hostlerRepository.findByHostlerMobile(mobileNo);
	    if (hostlerOptional.isEmpty()) {
	        throw new ResourceNotFoundException("Hostler with the provided mobile number does not exist in the HostlerTable");
	    }
	    else {
	    	 String month = hostlerFeeDto.getMonth();
	    	 Optional<HostlerFee> hostlerFee1 = hostlerFeerepository.findByHostlerMobileAndMonth(mobileNo,month);
	 	    if (hostlerFee1.isPresent()) {
	 	        throw new DuplicateEntryException("Hostler Fee with the provided month is alreday Paid");
	 	    }
	    
	    try {
	        // Retrieve the existing hostler details
	        Hostler existingHostler = hostlerOptional.get();
	        	
	        HostlerFee hostlerFee = null;
	        
	        hostlerFee.setHostlerMobile(existingHostler.getHostlerMobile());
	        hostlerFee.setHostlerName(existingHostler.getHostlerName());
	        hostlerFee.setHostlertEmail(existingHostler.getHostlerEmail());
	        hostlerFee.setHostlerRoomNo(existingHostler.getHostlerRoomNo());
	        
	     // Map DTO to Entity and set hostler-related details
	         modelMapper.map(hostlerFeeDto, HostlerFee.class);

	        // Save the hostler fee entity
	        hostlerFeerepository.save(hostlerFee);

	        // Logging success
	        System.out.println("HostlerFee saved successfully with ID: " + hostlerFee.getId());

	        return ResponseEntity.status(HttpStatus.CREATED).body("HostlerFee created successfully");

	    } catch (Exception e) {
	        // Logging the error
	        e.printStackTrace();
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred while creating HostlerFee");
	    }
	    }
	}


	
	@Override
	public ResponseEntity<String> deleteHostlerFee(long id) {
		 Optional<HostlerFee> hostlerFee = hostlerFeerepository.findById(id);
	        if (hostlerFee.isEmpty()) {
	            throw new ResourceNotFoundException("Provided Id Details are Not Existed");
	        }
	        else
	        {
	        	hostlerFeerepository.deleteById(id);
	        	 return ResponseEntity.status(HttpStatus.NO_CONTENT).body("HostlerFee Details are deleted succcessfully");
	        }
	}
	
	
	@Override
	public ResponseEntity<String> editHostlerFeeById(long id, HostlerFeeDto hostlerFeeDto) {
	    Optional<HostlerFee> hostlerFee = hostlerFeerepository.findById(id);
	    if (hostlerFee.isEmpty()) {
	        throw new ResourceNotFoundException("Provided Id Details are Not Existed");
	    } else {
	        HostlerFee existingHostlerFee = hostlerFee.get();
	        
	        // Check if the mobile number has changed
	        if (!existingHostlerFee.getHostlerMobile().equals(hostlerFeeDto.getHostlerMobile())) {
	            
	            // Check if the new mobile number already exists with the given name and email
	            String name = hostlerFeeDto.getHostlerName();
	            String mobile = hostlerFeeDto.getHostlerMobile();
	            String email = hostlerFeeDto.getHostlertEmail();
	            
	            Optional<HostlerFee> hostlerFeeWithNewMobile = hostlerFeerepository.findByHostlerNameAndHostlerMobileAndHostlertEmail(name, mobile, email);
	            
	            if (hostlerFeeWithNewMobile.isPresent()) {
	                throw new DuplicateEntryException("Provided mobile number and other details already exist");
	            }
	        }
	        
	        // Update the hostler fee details
	        existingHostlerFee.setHostlertEmail(hostlerFeeDto.getHostlertEmail());
	        existingHostlerFee.setHostlerMobile(hostlerFeeDto.getHostlerMobile());
	        existingHostlerFee.setHostlerName(hostlerFeeDto.getHostlerName());
	        existingHostlerFee.setPaymentStatus(hostlerFeeDto.getPaymentStatus());

	        // Save the updated entity
	        hostlerFeerepository.save(existingHostlerFee);

	        return ResponseEntity.status(HttpStatus.CREATED).body("Updated Successfully");
	    }
	}

	@Override
	public ResponseEntity<List<HostlerFeeDto>> getByMobileNumber(String mobileNo) 
	{
		if(mobileNo == null)
		{
			throw new ResourceNotFoundException("Mobile Number is Empty");
		}
		else 
		{
			List<HostlerFee> hostlerFee1 = hostlerFeerepository.findByHostlerMobile(mobileNo);
			if(hostlerFee1.isEmpty())
			{
				throw new ResourceNotFoundException("Mobile number with the Provided data is not available");
			}
			else
			{
				List<HostlerFeeDto> hostlerFeeDtos = hostlerFee1.stream()
		                .map(hostlerFee -> modelMapper.map(hostlerFee, HostlerFeeDto.class))
		                .collect(Collectors.toList());
		        return ResponseEntity.status(HttpStatus.OK).body(hostlerFeeDtos);
				
			}
		}
	}

	
	
	
	
//
//	@Override
//		public ResponseEntity<String> editHostlerFeeById(long id, HostlerFeeDto hostlerFeeDto) {
//		 Optional<HostlerFee> hostlerFee = hostlerFeerepository.findById(id);
//	        if (hostlerFee.isEmpty()) {
//	            throw new ResourceNotFoundException("Provided Id Details are Not Existed");
//	        }
//	        else
//	        {
//	        	HostlerFee existingHostlerFee = hostlerFee.get();
//	        	if(existingHostlerFee.getHostlerMobile() != hostlerFeeDto.getHostlerMobile())
//	        	{
//	        		  String name = hostlerFeeDto.getHostlerName();
//	        	        String mobile = hostlerFeeDto.getHostlerMobile();
//	        	        String email = hostlerFeeDto.getHostlertEmail();
//	        	      
//	        	        
//	        	        Optional<HostlerFee> hostlerFee1 = hostlerFeerepository.findByHostlerNameAndHostlerMobileAndHostlertEmail(name,mobile,email);
//	        	        
////	        	        Optional<Hostler> hostler1 = hostlerRepository.findByHostlerNameAndHostlerMobile(name,mobile);
//	        		 if(hostlerFee1.isEmpty())
//	        		 {
////	        			 existingHostler.setHostel(hostlerDto.getHostel());
//	        			 existingHostlerFee.setHostlertEmail(hostlerFeeDto.getHostlertEmail());
//	        			 existingHostlerFee.setHostlerMobile(hostlerFeeDto.getHostlerMobile());
//	        			 existingHostlerFee.setHostlerName(hostlerFeeDto.getHostlerName());
//	        			 existingHostlerFee.setPaymentStatus(hostlerFeeDto.getPaymentStatus());
//	        			 
//	        			 hostlerFeerepository.save(existingHostlerFee);
//	        			 
//	        				return ResponseEntity.status(HttpStatus.CREATED).body("Updated Successfully existed hostler");
//	        		 }
//	        		 else
//	        		 {
//	        			 throw new ResourceNotFoundException("Provided Id Details are already existed");
//	        		 }
//	        	}
//	        }
//		return null;
//	}
	

}
